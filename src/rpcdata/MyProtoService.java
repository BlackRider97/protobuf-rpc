// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: getConfigService.proto

package rpcdata;

public final class MyProtoService {
  private MyProtoService() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf service {@code protobuftest.GetConfigService}
   */
  public static abstract class GetConfigService
      implements com.google.protobuf.Service {
    protected GetConfigService() {}

    public interface Interface {
      /**
       * <code>rpc getConfig(.protobuftest.ConfigRequest) returns (.protobuftest.ConfigReply);</code>
       */
      public abstract void getConfig(
          com.google.protobuf.RpcController controller,
          rpcdata.ConfigProtos.ConfigRequest request,
          com.google.protobuf.RpcCallback<rpcdata.ConfigProtos.ConfigReply> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new GetConfigService() {
        @java.lang.Override
        public  void getConfig(
            com.google.protobuf.RpcController controller,
            rpcdata.ConfigProtos.ConfigRequest request,
            com.google.protobuf.RpcCallback<rpcdata.ConfigProtos.ConfigReply> done) {
          impl.getConfig(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.getConfig(controller, (rpcdata.ConfigProtos.ConfigRequest)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return rpcdata.ConfigProtos.ConfigRequest.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return rpcdata.ConfigProtos.ConfigReply.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <code>rpc getConfig(.protobuftest.ConfigRequest) returns (.protobuftest.ConfigReply);</code>
     */
    public abstract void getConfig(
        com.google.protobuf.RpcController controller,
        rpcdata.ConfigProtos.ConfigRequest request,
        com.google.protobuf.RpcCallback<rpcdata.ConfigProtos.ConfigReply> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return rpcdata.MyProtoService.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.getConfig(controller, (rpcdata.ConfigProtos.ConfigRequest)request,
            com.google.protobuf.RpcUtil.<rpcdata.ConfigProtos.ConfigReply>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return rpcdata.ConfigProtos.ConfigRequest.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return rpcdata.ConfigProtos.ConfigReply.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends rpcdata.MyProtoService.GetConfigService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void getConfig(
          com.google.protobuf.RpcController controller,
          rpcdata.ConfigProtos.ConfigRequest request,
          com.google.protobuf.RpcCallback<rpcdata.ConfigProtos.ConfigReply> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          rpcdata.ConfigProtos.ConfigReply.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            rpcdata.ConfigProtos.ConfigReply.class,
            rpcdata.ConfigProtos.ConfigReply.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public rpcdata.ConfigProtos.ConfigReply getConfig(
          com.google.protobuf.RpcController controller,
          rpcdata.ConfigProtos.ConfigRequest request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public rpcdata.ConfigProtos.ConfigReply getConfig(
          com.google.protobuf.RpcController controller,
          rpcdata.ConfigProtos.ConfigRequest request)
          throws com.google.protobuf.ServiceException {
        return (rpcdata.ConfigProtos.ConfigReply) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          rpcdata.ConfigProtos.ConfigReply.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:protobuftest.GetConfigService)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026getConfigService.proto\022\014protobuftest\032\016" +
      "testData.proto2W\n\020GetConfigService\022C\n\tge" +
      "tConfig\022\033.protobuftest.ConfigRequest\032\031.p" +
      "rotobuftest.ConfigReplyB\034\n\007rpcdataB\016MyPr" +
      "otoService\210\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          rpcdata.ConfigProtos.getDescriptor(),
        }, assigner);
    rpcdata.ConfigProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
